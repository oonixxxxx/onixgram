from flask import Flask, render_template, request, redirect, url_for, session, flash
from flask_sqlalchemy import SQLAlchemy
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è —Å–µ—Å—Å–∏–π –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
app.secret_key = 'your-secret-key'  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///twitter_clone.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
if not os.path.exists('instance'):
    os.makedirs('instance')

db = SQLAlchemy(app)
app.static_folder = 'static'

# –¢–∞–±–ª–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–æ–∫ (followers)
followers = db.Table('followers',
    db.Column('follower_id', db.Integer, db.ForeignKey('user.id')),
    db.Column('followed_id', db.Integer, db.ForeignKey('user.id'))
)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ªÔøΩÔøΩ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
class User(db.Model):
    """
    –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª—è–º–∏:
    - id: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    - username: —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    - email: —É–Ω–∏–∫–∞–ª—å–Ω—ã–π email –∞–¥—Ä–µ—Å
    - password: —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å
    """
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    bio = db.Column(db.String(160))  # –ë–∏–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tweets = db.relationship('Tweet', backref='author', lazy='dynamic')
    # –ü–æ–¥–ø–∏—Å–∫–∏
    followed = db.relationship(
        'User', secondary=followers,
        primaryjoin=(followers.c.follower_id == id),
        secondaryjoin=(followers.c.followed_id == id),
        backref=db.backref('followers', lazy='dynamic'), lazy='dynamic'
    )

    def follow(self, user):
        if not self.is_following(user):
            self.followed.append(user)

    def unfollow(self, user):
        if self.is_following(user):
            self.followed.remove(user)

    def is_following(self, user):
        return self.followed.filter(followers.c.followed_id == user.id).count() > 0

class Tweet(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    content = db.Column(db.String(280), nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    likes = db.relationship('Like', backref='tweet', lazy='dynamic')

    def is_liked_by(self, user_id):
        return self.likes.filter_by(user_id=user_id).first() is not None

class Like(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    tweet_id = db.Column(db.Integer, db.ForeignKey('tweet.id'), nullable=False)
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)

# –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def create_official_account():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–µ—Ä–≤–æ–≥–æ —Ç–≤–∏—Ç–∞"""
    official_user = User.query.filter_by(username='TwitterClone').first()
    if not official_user:
        # –°–æ–∑–¥–∞–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
        hashed_password = generate_password_hash('secure_admin_password')
        official_user = User(
            username='TwitterClone',
            email='admin@twitterclone.com',
            password=hashed_password,
            bio='–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç Twitter Clone'
        )
        db.session.add(official_user)
        db.session.commit()

        # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–≤–∏—Ç
        welcome_tweet = Tweet(
            content='–ö–∞–∫ –¥–µ–ª–∞? üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Twitter Clone! –≠—Ç–æ –ø–µ—Ä–≤—ã–π —Ç–≤–∏—Ç –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ.',
            user_id=official_user.id
        )
        db.session.add(welcome_tweet)
        db.session.commit()

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with app.app_context():
            db.create_all()
            create_official_account()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

def check_db_integrity():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with app.app_context():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
            User.query.first()
            Tweet.query.first()
            Like.query.first()
        return True
    except Exception as e:
        print(f"–û—àÔøΩÔøΩ–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
with app.app_context():
    if not check_db_integrity():
        print("–ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
        init_db()
    else:
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ—Ä—è–¥–∫–µ")

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@app.route('/')
def index():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    if not session.get('user_id'):
        return redirect(url_for('welcome'))
        
    tweets = []
    user = User.query.get(session['user_id'])
    # –ü–æ–ª—É—á–∞–µ–º —Ç–≤–∏—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ—Ö, –Ω–∞ –∫–æ–≥–æ –æ–Ω –ø–æ–¥–ø–∏—Å–∞–Ω
    followed_users = user.followed.all()
    followed_users.append(user)  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–≤–∏—Ç—ã —Å–∞–º–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∞–∫–∂–µ —Ç–≤–∏—Ç—ã –æ—Ç –Ω–æ–≤–æ—Å—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
    news_bot = User.query.filter_by(username='gpt_news').first()
    if news_bot:
        followed_users.append(news_bot)
    
    tweets = Tweet.query.filter(Tweet.user_id.in_([u.id for u in followed_users])) \
                      .order_by(Tweet.timestamp.desc()).all()
    
    return render_template('index.html', tweets=tweets)

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@app.route('/register', methods=['GET', 'POST'])
def register():
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    GET: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    POST: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    if request.method == 'POST':
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
        username = request.form['username']
        email = request.form['email']
        password = request.form['password']
        confirm_password = request.form['confirm_password']

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π
        if password != confirm_password:
            flash('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç')
            return redirect(url_for('register'))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        existing_user = User.query.filter_by(username=username).first()
        if existing_user:
            flash('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            return redirect(url_for('register'))

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º email
        existing_email = User.query.filter_by(email=email).first()
        if existing_email:
            flash('Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è')
            return redirect(url_for('register'))

        # –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        hashed_password = generate_password_hash(password)
        new_user = User(username=username, email=email, password=hashed_password)
        db.session.add(new_user)
        db.session.commit()

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        session['user_id'] = new_user.id
        session['username'] = new_user.username
        return redirect(url_for('index'))

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞
    return render_template('register.html')

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É
@app.route('/login', methods=['GET', 'POST'])
def login():
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    GET: –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
    POST: –ø—Ä–æ–≤–µ—Ä–∫–∞ —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
    """
    if request.method == 'POST':
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
        username = request.form['username']
        password = request.form['password']

        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏ –∏–ª–∏ email
        user = User.query.filter(
            (User.username == username) | (User.email == username)
        ).first()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        if user and check_password_hash(user.password, password):
            session['user_id'] = user.id
            session['username'] = user.username
            return redirect(url_for('index'))
        else:
            flash('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
            return redirect(url_for('login'))

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞ –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞
    return render_template('login.html')

# –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
@app.route('/logout')
def logout():
    """
    –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã:
    - –£–¥–∞–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–∏
    - –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    """
    session.pop('user_id', None)  # –£–¥–∞–ª–µ–Ω–∏–µ user_id –∏–∑ —Å–µ—Å—Å–∏–∏
    session.pop('username', None)  # –£–¥–∞–ª–µ–Ω–∏–µ username –∏–∑ —Å–µ—Å—Å–∏–∏
    return redirect(url_for('index'))

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–≤–∏—Ç–∞
@app.route('/tweet', methods=['POST'])
def tweet():
    if 'user_id' not in session:
        flash('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É')
        return redirect(url_for('login'))
    
    try:
        content = request.form.get('content')
        if content and len(content) <= 280:
            tweet = Tweet(content=content, user_id=session['user_id'])
            db.session.add(tweet)
            db.session.commit()
            flash('–¢–≤–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω')
        else:
            flash('–û—à–∏–±–∫–∞: —Ç–≤–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ –¥–ª–∏–Ω–Ω–µ–µ 280 —Å–∏–º–≤–æ–ª–æ–≤')
    except Exception as e:
        db.session.rollback()
        flash('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–≤–∏—Ç–∞')
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–≤–∏—Ç–∞: {e}")
    
    return redirect(url_for('index'))

# –î–æ–±–∞–≤–∏–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ª–∞–π–∫–æ–≤
@app.route('/like/<int:tweet_id>', methods=['POST'])
def like_tweet(tweet_id):
    if 'user_id' not in session:
        return redirect(url_for('login'))
    
    existing_like = Like.query.filter_by(
        user_id=session['user_id'],
        tweet_id=tweet_id
    ).first()

    if existing_like:
        db.session.delete(existing_like)
    else:
        like = Like(user_id=session['user_id'], tweet_id=tweet_id)
        db.session.add(like)
    
    db.session.commit()
    return redirect(url_for('index'))

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ—Å–ª–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
@app.route('/welcome')
def welcome():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if 'user_id' in session:
        return redirect(url_for('index'))
    return render_template('welcome.html')

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è
@app.route('/profile/<username>', methods=['GET', 'POST'])
def profile(username):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
    profile_user = User.query.filter_by(username=username).first_or_404()
    
    # –ï—Å–ª–∏ —ç—Ç–æ POST –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    if request.method == 'POST' and session.get('user_id') == profile_user.id:
        bio = request.form.get('bio', '').strip()
        if len(bio) <= 160:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –±–∏–æ
            profile_user.bio = bio
            db.session.commit()
            flash('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω')
        return redirect(url_for('profile', username=username))

    # –ü–æ–ª—É—á–∞–µ–º —Ç–≤–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    tweets = Tweet.query.filter_by(user_id=profile_user.id)\
                       .order_by(Tweet.timestamp.desc()).all()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    is_following = False
    if session.get('user_id'):
        current_user = User.query.get(session['user_id'])
        is_following = current_user.is_following(profile_user)

    return render_template('profile.html', 
                         user=profile_user, 
                         tweets=tweets,
                         is_following=is_following)

# –î–æ–±–∞–≤—å—Ç–µ –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
@app.route('/follow/<username>')
def follow(username):
    if not session.get('user_id'):
        return redirect(url_for('login'))
    
    user_to_follow = User.query.filter_by(username=username).first()
    if user_to_follow:
        current_user = User.query.get(session['user_id'])
        current_user.follow(user_to_follow)
        db.session.commit()
    
    return redirect(url_for('profile', username=username))

@app.route('/unfollow/<username>')
def unfollow(username):
    if not session.get('user_id'):
        return redirect(url_for('login'))
    
    user_to_unfollow = User.query.filter_by(username=username).first()
    if user_to_unfollow:
        current_user = User.query.get(session['user_id'])
        current_user.unfollow(user_to_unfollow)
        db.session.commit()
    
    return redirect(url_for('profile', username=username))

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
if __name__ == '__main__':
    app.run(debug=True)  # debug=True —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏! 